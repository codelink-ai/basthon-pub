{"version":3,"file":"427.acd92c5303fa908dc23f.js","mappings":"kLAIO,MAAMA,UAAoB,IAC7BC,YAAYC,GAAYC,MAAMD,GAC9BE,WAAa,MAAO,QACpBC,eAAiB,MAAO,QACxBC,aAAe,MAAO,CAAC,MAIvBC,eACI,MAAM,WAAEC,SAAqB,2DAC7BC,KAAKD,WAAaA,EAClBC,KAAKC,UAKTH,gBAAgBI,EAAMC,EAAaC,EAAaC,EAAO,MACnD,IAAIC,EAEJ,GAAuB,MAAnBN,KAAKD,WACL,OACJM,EAAKE,aAAc,EAEnBP,KAAKD,WAAWS,GAAGC,OAASN,EAC5BH,KAAKD,WAAWS,GAAGE,OAASN,EAC5BJ,KAAKW,kBACL,IAAIC,EAAoC,QAA1BN,EAAKN,KAAKD,kBAA+B,IAAPO,OAAgB,EAASA,EAAGO,KAAKX,GASjF,OAPAF,KAAKD,WAAWS,GAAGC,OAASK,QAAQC,IACpCf,KAAKD,WAAWS,GAAGE,OAASI,QAAQE,MAGhCJ,EADkB,iBAAXA,GAAuBA,EAAOK,OAAS,EACrC,CAAE,aAAcL,EAAOM,QAAQ,MAAO,UAEtCC,EACN,CAACP,EAAQZ,KAAKW,iBAKzBV,UACI,IAAIK,EACJ,GAAgF,KAAhD,QAA1BA,EAAKN,KAAKD,kBAA+B,IAAPO,OAAgB,EAASA,EAAGc,QAChE,MAAM,IAAIC,MAAM,6BACpBrB,KAAKW,gBAAkB,EAK3BW,QAAQC,EAAUC,GACd,GAAuB,MAAnBxB,KAAKD,WACL,OACJyB,EAAU,IAAIC,WAAWD,GAEzB,MAAME,EADQ,IAAIC,YAAY,SACLC,OAAOJ,GAChCxB,KAAKD,WAAW8B,WAAWN,EAAUG,GAMzCI,UAAUP,EAAUC,IAKpBO,cACI,MAAO,GAKXC,QAAQC,IAKRC,kBAAkBX,IAMlBY,KAAKC,GACD,OAAO,EAKXC,SACI,MAAO,iCAEXC,MAAQ,MAAO,KAEfC,MAAQ,MAAO,KAQfC,SAAStC,GACL,MAAO","sources":["webpack://@basthon/basthon-console/./node_modules/@basthon/kernel-ocaml/lib/kernel.js"],"sourcesContent":["import { KernelBase } from '@basthon/kernel-base';\n/**\n * An OCaml kernel that satisfies Basthon's API.\n */\nexport class KernelOCaml extends KernelBase {\n    constructor(rootPath) { super(rootPath); }\n    language() { return \"ocaml\"; }\n    languageName() { return \"OCaml\"; }\n    moduleExts() { return ['ml']; }\n    /**\n     * Start the Basthon kernel asynchronously.\n     */\n    async launch() {\n        const { __kernel__ } = await import(\"./__kernel__\");\n        this.__kernel__ = __kernel__;\n        this.restart();\n    }\n    /**\n     * Basthon async code evaluation function.\n     */\n    async evalAsync(code, outCallback, errCallback, data = null) {\n        var _a;\n        // force interactivity in all modes\n        if (this.__kernel__ == null)\n            return;\n        data.interactive = true;\n        // set stream callbacks\n        this.__kernel__.io.stdout = outCallback;\n        this.__kernel__.io.stderr = errCallback;\n        this.execution_count++;\n        let result = (_a = this.__kernel__) === null || _a === void 0 ? void 0 : _a.exec(code);\n        // restoration\n        this.__kernel__.io.stdout = console.log;\n        this.__kernel__.io.stderr = console.error;\n        // return result\n        if (typeof result === 'string' && result.length > 0)\n            result = { 'text/plain': result.replace(/\\n$/, \"\") };\n        else\n            result = undefined;\n        return [result, this.execution_count];\n    }\n    /**\n     * Restart the kernel.\n     */\n    restart() {\n        var _a;\n        if (((_a = this.__kernel__) === null || _a === void 0 ? void 0 : _a.init()) !== 0)\n            throw new Error(\"Can't start OCaml kernel!\");\n        this.execution_count = 0;\n    }\n    /**\n     * Put a file on the local (emulated) filesystem.\n     */\n    putFile(filename, content) {\n        if (this.__kernel__ == null)\n            return;\n        content = new Uint8Array(content);\n        let decoder = new TextDecoder(\"utf-8\");\n        const _content = decoder.decode(content);\n        this.__kernel__.createfile(filename, _content);\n    }\n    /**\n     * Put an importable module on the local (emulated) filesystem\n     * and load dependencies.\n     */\n    putModule(filename, content) {\n    }\n    /**\n     * List modules launched via putModule.\n     */\n    userModules() {\n        return [];\n    }\n    /**\n     * Download a file from the VFS.\n     */\n    getFile(path) {\n    }\n    /**\n     * Download a user module file.\n     */\n    getUserModuleFile(filename) {\n    }\n    /**\n     * Is the source ready to be evaluated or want we more?\n     * Usefull to set ps1/ps2 in teminal prompt.\n     */\n    more(source) {\n        return false;\n    }\n    /**\n     * Mimic the OCaml's REPL banner.\n     */\n    banner() {\n        return \"        OCaml version 4.11.1\\n\";\n    }\n    ps1() { return \"# \"; }\n    ;\n    ps2() { return \"  \"; }\n    ;\n    /**\n     * Complete a code at the end (usefull for tab completion).\n     *\n     * Returns an array of two elements: the list of completions\n     * and the start index.\n     */\n    complete(code) {\n        return [];\n    }\n}\n"],"names":["KernelOCaml","constructor","rootPath","super","language","languageName","moduleExts","async","__kernel__","this","restart","code","outCallback","errCallback","data","_a","interactive","io","stdout","stderr","execution_count","result","exec","console","log","error","length","replace","undefined","init","Error","putFile","filename","content","Uint8Array","_content","TextDecoder","decode","createfile","putModule","userModules","getFile","path","getUserModuleFile","more","source","banner","ps1","ps2","complete"],"sourceRoot":""}