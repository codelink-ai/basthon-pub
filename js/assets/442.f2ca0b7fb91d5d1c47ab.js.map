{"version":3,"file":"442.f2ca0b7fb91d5d1c47ab.js","mappings":"wLACO,MAAMA,UAAyB,IAClCC,YAAYC,GACRC,MAAMD,GACNE,KAAKC,SAAW,CACZC,aAASC,EACTC,aAASD,EACTE,YAAQF,GAEZH,KAAKM,gBAAkB,EAI3BC,WAAa,MAAO,aAEpBC,eAAiB,MAAO,aAExBC,aAAe,MAAO,CAAC,MAEvBC,gBAEAC,KAAKC,GACD,IAEI,OAAOP,OAAOM,KAAK,4BAA4BC,OAEnD,MAAOC,GACH,GAAIA,aAAaC,YACb,OAAO,IAAKC,SAAS,gBAAgBH,OAAWI,KAAKhB,KAAKC,UAC9D,MAAMY,GAIdH,gBAAgBE,EAAMK,EAAaC,EAAaC,EAAO,MAEnDA,EAAKC,aAAc,EAEnB,MAAMC,EAAcC,QAAQC,IACtBC,EAAgBF,QAAQG,MAK9B,IAAIC,EAJJJ,QAAQC,IAAMN,EACdK,QAAQG,MAAQP,EAChBlB,KAAKM,kBAGL,IACIoB,EAAS1B,KAAKW,KAAKC,GAEvB,MAAOC,GACHS,QAAQG,MAAM,YAAYZ,EAAEc,MAAQ,OAAOd,MAAAA,OAA6B,EAASA,EAAEe,WAQvF,OALAN,QAAQC,IAAMF,EACdC,QAAQG,MAAQD,OAEM,IAAXE,IACPA,EAAS,CAAE,aAAcG,KAAKC,UAAUJ,KACrC,CAACA,EAAQ1B,KAAKM,iBAGzByB,MAAQ,MAAO,QAEfC,MAAQ,MAAO,QAEfC,WAEAC,KAAKC,GAAU,OAAO,EAEtBC,SAASxB,GAAQ,MAAO,GAExByB,QAAQC,EAAUC,GACdjB,QAAQG,MAAM,WAAWa,4DAG7BE,UAAUF,EAAUC,GAGhB,GAFAA,EAAU,IAAIE,WAAWF,GAGhB,OAFGD,EAASI,MAAM,KAAKC,MAQxB,KAAM,CAAEf,QAAS,+BANrB,CAEI,MAAMgB,EADQ,IAAIC,YAAY,SACLC,OAAOP,GAChCvC,KAAKW,KAAKiC","sources":["webpack://@basthon/basthon-console/./node_modules/@basthon/kernel-javascript/lib/kernel.js"],"sourcesContent":["import { KernelBase } from '@basthon/kernel-base';\nexport class KernelJavaScript extends KernelBase {\n    constructor(rootPath) {\n        super(rootPath);\n        this._context = {\n            Basthon: undefined,\n            Jupyter: undefined,\n            window: undefined,\n        };\n        this.execution_count = 0;\n    }\n    ;\n    ;\n    language() { return \"javascript\"; }\n    ;\n    languageName() { return \"Javascript\"; }\n    ;\n    moduleExts() { return ['js']; }\n    ;\n    async launch() { }\n    ;\n    eval(code) {\n        try {\n            // using context to hide several global variables\n            return window.eval(`with(Basthon._context) { ${code} }`);\n        }\n        catch (e) {\n            if (e instanceof SyntaxError)\n                return (new Function(`with(this) { ${code} }`)).call(this._context);\n            throw e;\n        }\n    }\n    ;\n    async evalAsync(code, outCallback, errCallback, data = null) {\n        // force interactivity in all modes\n        data.interactive = true;\n        // backup\n        const console_log = console.log;\n        const console_error = console.error;\n        console.log = outCallback;\n        console.error = errCallback;\n        this.execution_count++;\n        // evaluation\n        let result = undefined;\n        try {\n            result = this.eval(code);\n        }\n        catch (e) {\n            console.error(`Uncaught ${e.name || \"\"}: ${e === null || e === void 0 ? void 0 : e.message}`);\n        }\n        // restoration\n        console.log = console_log;\n        console.error = console_error;\n        // return result\n        if (typeof result !== 'undefined')\n            result = { 'text/plain': JSON.stringify(result) };\n        return [result, this.execution_count];\n    }\n    ;\n    ps1() { return \" js> \"; }\n    ;\n    ps2() { return \"...> \"; }\n    ;\n    restart() { }\n    ;\n    more(source) { return false; }\n    ;\n    complete(code) { return []; }\n    ;\n    putFile(filename, content) {\n        console.error(`Fichier ${filename} not added since putFile has no mean in the JS context.`);\n    }\n    ;\n    putModule(filename, content) {\n        content = new Uint8Array(content);\n        const ext = filename.split('.').pop();\n        switch (ext) {\n            case 'js':\n                let decoder = new TextDecoder(\"utf-8\");\n                const _content = decoder.decode(content);\n                this.eval(_content);\n                break;\n            default:\n                throw { message: \"Only '.js' files supported.\" };\n        }\n    }\n    ;\n}\n"],"names":["KernelJavaScript","constructor","rootPath","super","this","_context","Basthon","undefined","Jupyter","window","execution_count","language","languageName","moduleExts","async","eval","code","e","SyntaxError","Function","call","outCallback","errCallback","data","interactive","console_log","console","log","console_error","error","result","name","message","JSON","stringify","ps1","ps2","restart","more","source","complete","putFile","filename","content","putModule","Uint8Array","split","pop","_content","TextDecoder","decode"],"sourceRoot":""}