{"version":3,"file":"23.4b468481cf17bd2708ba.js","mappings":"gLA2BO,MAAMA,UAAkB,IAC3BC,YAAYC,GACRC,MAAMD,GACNE,KAAKC,gBAAkB,EACvBD,KAAKE,WAAa,uDAElBF,KAAKG,aAAUC,EAEfJ,KAAKK,UAAY,GAGrBC,WAAa,MAAO,MAEpBC,eAAiB,MAAO,MAExBC,aAAe,MAAO,CAAC,MAAO,KAAM,UAEpCC,eACIT,KAAKU,UA7BbD,eAAyBE,GAErB,MAAMC,QAAiBC,MAAMF,EAAQ,oBAC/BG,QAAaF,EAASG,OAGtBC,EAAU,GAGhB,OAJU,IAAIC,SAAS,UAAWH,EAElCI,CAAEF,GAEKA,EAAQG,OAAO,CAAEC,WAAYT,IAoBfU,EAAWC,GAAS,GAAGtB,KAAKE,aAAaoB,MAC1DtB,KAAKuB,UAGTC,sBAAsBC,GAElB,GAAIA,EAAKC,OAAOC,QADC,IACmB,CAChC,MAAMC,EAAcC,KAAKC,MAAMC,IACzBC,EAAOP,EAAKC,OAAOO,MAAM,EAAGL,GAC5BM,EAAOT,EAAKC,OAAOO,OAAOL,GAChCH,EAAKC,OAASM,EAAKG,OAAO,CAACV,EAAKW,QAAQC,KAAI,IAAM,QAAQH,IAIlEV,kBAAkBC,GAMd,OALAzB,KAAKsC,eAAeb,GAKb,6EAJSA,EAAKW,QAAQC,KAAKE,GAAM,OAAOA,WAAUC,KAAK,0BAE/Cf,EAAKC,OAAOW,KAAKI,GAAM,OAASA,EAAEJ,KAAKK,GAAM,OAAOA,WAAUF,KAAK,IAAM,UAASA,KAAK,sBAK1GhB,kBAAkBC,GAId,OAHA7B,EAAU0C,eAAeb,GAGlB,GAFMA,EAAKW,QAAQI,KAAK,UAChBf,EAAKC,OAAOW,KAAKI,GAAMA,EAAED,KAAK,QAAOA,KAAK,QAI7D/B,gBAAgBK,EAAM6B,EAAaC,EAAaC,EAAO,MAInD,IAAIC,EACJ,GAHAD,EAAKE,aAAc,EACnB/C,KAAKC,kBAEe,YAAhBa,EAAKkC,OACLhD,KAAKiD,SAASjD,KAAKkD,GAAGC,SAAU,mBAE/B,CACD,MAAMC,EAASpD,KAAKkD,GAAGG,KAAKvC,GACd,MAAVsC,IAEIN,EADiB,GAAjBM,EAAOzB,YACEvB,EAEA,CACL,aAAcR,EAAU0D,WAAWF,EAAO,IAC1C,YAAaxD,EAAU2D,WAAWH,EAAO,MAIzD,MAAO,CAACN,EAAQ9C,KAAKC,iBAGzBuD,MAAQ,MAAO,QAEfC,MAAQ,MAAO,QAEflC,UAEQvB,KAAKkD,IACLlD,KAAKkD,GAAGQ,QACZ1D,KAAKC,gBAAkB,EAEvBD,KAAKkD,GAAK,IAAIlD,KAAKU,IAAIiD,SAAS3D,KAAKG,SAGrCH,KAAKkD,GAAGU,IAAI,6BAEZ5D,KAAKK,UAAUwD,SAAQtB,IAAOvC,KAAKkD,GAAGU,IAAIrB,MAG9CuB,KAAKC,GAAU,OAAO,EAEtBC,SAASlD,GAAQ,MAAO,GAExBmD,QAAQC,EAAUC,IAIlBC,UAAUF,EAAUC,GAGhB,OAFAA,EAAU,IAAIE,WAAWF,GACbD,EAASI,MAAM,KAAKC,OAE5B,IAAK,MAED,MAAMC,EADQ,IAAIC,YAAY,SACLC,OAAOP,GAChCnE,KAAKkD,GAAGU,IAAIY,GAEZxE,KAAKK,UAAUsE,KAAKH,GACpB,MACJ,IAAK,SACL,IAAK,KACGxE,KAAKkD,IACLlD,KAAKkD,GAAGQ,QACZ1D,KAAKkD,GAAK,IAAIlD,KAAKU,IAAIiD,SAASQ,GAEhCnE,KAAKG,QAAUgE,EACf,MACJ,QACI,KAAM,CAAES,QAAS","sources":["webpack://@basthon/basthon-console/./node_modules/@basthon/kernel-sql/lib/kernel.js"],"sourcesContent":["import { KernelBase } from '@basthon/kernel-base';\n/**\n * Workaround lack of ES6 support in SQL.js.\n *\n * https://github.com/sql-js/sql.js/issues/284\n *\n * Sample usage:\n * ```\n * import { initSqlJs } from './SqlJs';\n *\n * initSqlJs(file => `path/to/dist/${file}`).then(SQL => {\n *   const db = new SQL.Database();\n * });\n * ```\n * @param {function(string): string} fileMap\n */\nasync function initSqlJs(fileMap) {\n    // Get the SqlJs code as a string.\n    const response = await fetch(fileMap('sql-wasm.min.js'));\n    const code = await response.text();\n    // Instantiate the code and access its exports.\n    const f = new Function('exports', code);\n    const exports = {};\n    f(exports);\n    // Call the real initSqlJs().\n    return exports.Module({ locateFile: fileMap });\n}\nexport class KernelSQL extends KernelBase {\n    constructor(rootPath) {\n        super(rootPath);\n        this.execution_count = 0;\n        this._sqlJsBase = \"https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.5.0/\";\n        // initial db file (used to restart SQLite)\n        this._dbInit = undefined;\n        // initial SQL strings (used to restart SQLite)\n        this._sqlsInit = [];\n    }\n    ;\n    language() { return \"sql\"; }\n    ;\n    languageName() { return \"SQL\"; }\n    ;\n    moduleExts() { return ['sql', 'db', 'sqlite']; }\n    ;\n    async launch() {\n        this.SQL = await initSqlJs((file) => `${this._sqlJsBase}${file}`);\n        this.restart();\n    }\n    ;\n    static troncate_table(json) {\n        const max_size = 150;\n        if (json.values.length >= max_size) {\n            const half_length = Math.floor(max_size / 3);\n            const head = json.values.slice(0, half_length);\n            const tail = json.values.slice(-half_length);\n            json.values = head.concat([json.columns.map(() => 'â‹® ')], tail);\n        }\n    }\n    ;\n    static html_table(json) {\n        this.troncate_table(json);\n        const columns = json.columns.map((c) => `<th>${c}</th>`).join('');\n        const head = `<thead><tr style=\"text-align: right;\">${columns}</tr></thead>`;\n        const values = json.values.map((r) => '<tr>' + r.map((v) => `<td>${v}</td>`).join('') + '</tr>').join('');\n        const body = `<tbody>${values}</tbody>`;\n        return `<table class=\"dataframe\" border=\"1\">${head}${body}</table>`;\n    }\n    ;\n    static text_table(json) {\n        KernelSQL.troncate_table(json);\n        const head = json.columns.join('\\t');\n        const values = json.values.map((r) => r.join('\\t')).join('\\n');\n        return `${head}\\n${values}`;\n    }\n    ;\n    async evalAsync(code, outCallback, errCallback, data = null) {\n        // force interactivity in all modes\n        data.interactive = true;\n        this.execution_count++;\n        let result = undefined;\n        if (code.trim() === \".export\") {\n            this.download(this.db.export(), \"database.db\");\n        }\n        else {\n            const output = this.db.exec(code);\n            if (output != null) {\n                if (output.length == 0)\n                    result = undefined;\n                else\n                    result = {\n                        'text/plain': KernelSQL.text_table(output[0]),\n                        'text/html': KernelSQL.html_table(output[0])\n                    };\n            }\n        }\n        return [result, this.execution_count];\n    }\n    ;\n    ps1() { return \"sql> \"; }\n    ;\n    ps2() { return \"...> \"; }\n    ;\n    restart() {\n        // warning: we should probably reload module files...\n        if (this.db)\n            this.db.close();\n        this.execution_count = 0;\n        // reloading .db file\n        this.db = new this.SQL.Database(this._dbInit);\n        // foreign keys are activated by default\n        // see: https://www.sqlite.org/foreignkeys.html#fk_enable\n        this.db.run(\"PRAGMA foreign_keys = ON;\");\n        // reloading SQL modules files\n        this._sqlsInit.forEach(c => { this.db.run(c); });\n    }\n    ;\n    more(source) { return false; }\n    ;\n    complete(code) { return []; }\n    ;\n    putFile(filename, content) {\n        // just ignoring this since we don't have a filesystem.\n    }\n    ;\n    putModule(filename, content) {\n        content = new Uint8Array(content);\n        const ext = filename.split('.').pop();\n        switch (ext) {\n            case 'sql':\n                let decoder = new TextDecoder(\"utf-8\");\n                const _content = decoder.decode(content);\n                this.db.run(_content);\n                // SQL strings are concatenated\n                this._sqlsInit.push(_content);\n                break;\n            case 'sqlite':\n            case 'db':\n                if (this.db)\n                    this.db.close();\n                this.db = new this.SQL.Database(content);\n                // initial db file is replaced\n                this._dbInit = content;\n                break;\n            default:\n                throw { message: \"Only '.sql', '.db' and '.sqlite' files supported.\" };\n        }\n    }\n    ;\n}\n"],"names":["KernelSQL","constructor","rootPath","super","this","execution_count","_sqlJsBase","_dbInit","undefined","_sqlsInit","language","languageName","moduleExts","async","SQL","fileMap","response","fetch","code","text","exports","Function","f","Module","locateFile","initSqlJs","file","restart","static","json","values","length","half_length","Math","floor","max_size","head","slice","tail","concat","columns","map","troncate_table","c","join","r","v","outCallback","errCallback","data","result","interactive","trim","download","db","export","output","exec","text_table","html_table","ps1","ps2","close","Database","run","forEach","more","source","complete","putFile","filename","content","putModule","Uint8Array","split","pop","_content","TextDecoder","decode","push","message"],"sourceRoot":""}