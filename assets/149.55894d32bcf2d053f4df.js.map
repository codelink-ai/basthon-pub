{"version":3,"file":"149.55894d32bcf2d053f4df.js","mappings":"qLAIO,MAAMA,UAAsB,IAC/BC,YAAYC,GACRC,MAAMD,GAINE,KAAKC,YAAc,2DACnBD,KAAKE,WAAa,KAClBF,KAAKG,cAAgB,GAKzBC,mBAAmBC,GAAW,GAC1B,OAAOL,KAAKM,YAAYD,GAAY,WAExCE,WAAa,MAAO,UACpBC,eAAiB,MAAO,WACxBC,aAAe,MAAO,CAAC,MAIvBC,gBACI,MAAMC,EAAUC,OAAOD,QAEvBX,KAAKG,cAAgBQ,EAAQE,UAAU,+CAGvC,MAAMC,EAAkBC,QAAQC,MAChCD,QAAQC,MAAQ,aACVL,EAAQM,YAAYjB,KAAKM,aAAY,GAAQ,eACnDS,QAAQC,MAAQF,QAEVH,EAAQO,eAAe,iCAE7BlB,KAAKE,WAAaS,EAAQQ,QAAQC,YAAYlB,iBAExCS,EAAQO,eAAe,mBAKjCR,eAEI,IACI,MAAMW,EAAMrB,KAAKM,cAAgB,4BAC3BV,EAAc0B,IAAI,CAAEC,OAAQ,OAAQF,IAAKA,IAC/CrB,KAAKC,YAAcoB,EAEvB,MAAOG,IAEPZ,OAAOa,kBAAoBzB,KAAKC,YAAYyB,OAAO,EAAG1B,KAAKC,YAAY0B,YAAY,MAAQ,IAC3F,UACU/B,EAAcgC,WAAW5B,KAAKC,aAExC,MAAOe,GAGH,MAFAD,QAAQc,IAAIb,GACZD,QAAQC,MAAM,yBACRA,EAEV,GAAmC,MAA/BJ,OAAOkB,qBACP,MAAM,IAAIC,MAAM,+BAEdnB,OAAOkB,qBAAqBE,KAAKhC,KAAKiC,QAAQC,KAAKlC,OAAO,WAAc,MAAM,IAAI+B,MAAM,qCAKlGrB,gBAAgByB,EAAMC,EAAaC,EAAaC,EAAO,MAQnD,YAP2B,IAAhBF,IACPA,EAAc,SAAUG,GAAQxB,QAAQc,IAAIU,UAErB,IAAhBF,IACPA,EAAc,SAAUE,GAAQxB,QAAQC,MAAMuB,WAGrCvC,KAAKE,WAAWsC,KAAKL,EAAMC,EAAaC,EAAaC,GAKtEG,UACI,OAAOzC,KAAKE,WAAWuC,UAK3BC,QAAQC,EAAUC,GACd5C,KAAKE,WAAW2C,SAASF,EAAUC,GAMvCE,UAAUH,EAAUC,GAChB,OAAO5C,KAAKE,WAAW6C,WAAWJ,EAAUC,GAKhDI,cACI,OAAOhD,KAAKE,WAAW+C,eAK3BC,QAAQC,GACJ,OAAOnD,KAAKE,WAAWkD,SAASD,GAKpCE,kBAAkBV,GACd,OAAO3C,KAAKE,WAAWoD,qBAAqBX,GAMhDY,KAAKC,GACD,OAAOxD,KAAKE,WAAWqD,KAAKC,GAKhCC,SAKI,MAAO,yIAQXC,SAASvB,GACL,OAAOnC,KAAKE,WAAWwD,SAASvB,GAKpCwB,MAAMR,GACFvC,OAAOD,QAAQiD,QAAQC,GAAGF,MAAMR,GAKpCW,MAAMX,GACFvC,OAAOD,QAAQiD,QAAQC,GAAGC,MAAMX","sources":["webpack://@basthon/basthon-console/./node_modules/@basthon/kernel-python3/lib/kernel.js"],"sourcesContent":["import { KernelBase } from '@basthon/kernel-base';\n/**\n * A Python kernel that satisfies Basthon's API.\n */\nexport class KernelPython3 extends KernelBase {\n    constructor(rootPath) {\n        super(rootPath);\n        /**\n         * Where to find pyodide.js (private).\n         */\n        this._pyodideUrl = \"https://cdn.jsdelivr.net/pyodide/v0.16.1/full/pyodide.js\";\n        this.__kernel__ = null;\n        this.pythonVersion = \"\";\n    }\n    /**\n     * Get the URL of Basthon modules dir.\n     */\n    basthonModulesRoot(absolute = false) {\n        return this.basthonRoot(absolute) + \"/modules\";\n    }\n    language() { return \"python3\"; }\n    languageName() { return \"Python 3\"; }\n    moduleExts() { return ['py']; }\n    /**\n     * What to do when loaded (private).\n     */\n    async _onload() {\n        const pyodide = window.pyodide;\n        // get the version of Python from Python\n        this.pythonVersion = pyodide.runPython(\"import platform ; platform.python_version()\");\n        // this is for avoiding \"Unknown package 'basthon'\" error\n        // but can be removed  with 0.17.0 since it is fixed upstream\n        const consoleErrorBck = console.error;\n        console.error = () => { };\n        await pyodide.loadPackage(this.basthonRoot(true) + \"/basthon.js\");\n        console.error = consoleErrorBck;\n        // importing basthon to get it's kernel\n        await pyodide.runPythonAsync(\"import basthon as __basthon__\");\n        // kernel lookup\n        this.__kernel__ = pyodide.globals.__basthon__.__kernel__;\n        // removing basthon from global namespace\n        await pyodide.runPythonAsync(\"del __basthon__\");\n    }\n    /**\n     * Start the Basthon kernel asynchronously.\n     */\n    async launch() {\n        /* testing if Pyodide is installed locally */\n        try {\n            const url = this.basthonRoot() + \"/pyodide/pyodide.js\";\n            await KernelPython3.xhr({ method: \"HEAD\", url: url });\n            this._pyodideUrl = url;\n        }\n        catch (e) { }\n        // forcing Pyodide to look at the right location for other files\n        window.languagePluginUrl = this._pyodideUrl.substr(0, this._pyodideUrl.lastIndexOf('/')) + '/';\n        try {\n            await KernelPython3.loadScript(this._pyodideUrl);\n        }\n        catch (error) {\n            console.log(error);\n            console.error(\"Can't load pyodide.js\");\n            throw error;\n        }\n        if (window.languagePluginLoader == null) {\n            throw new Error(\"Can't load pyodide.js\");\n        }\n        await window.languagePluginLoader.then(this._onload.bind(this), function () { throw new Error(\"Can't load Python from Pyodide\"); });\n    }\n    /**\n     * Basthon async code evaluation function.\n     */\n    async evalAsync(code, outCallback, errCallback, data = null) {\n        if (typeof outCallback === 'undefined') {\n            outCallback = function (text) { console.log(text); };\n        }\n        if (typeof errCallback === 'undefined') {\n            errCallback = function (text) { console.error(text); };\n        }\n        // loading dependencies are loaded by eval\n        return await this.__kernel__.eval(code, outCallback, errCallback, data);\n    }\n    /**\n     * Restart the kernel.\n     */\n    restart() {\n        return this.__kernel__.restart();\n    }\n    /**\n     * Put a file on the local (emulated) filesystem.\n     */\n    putFile(filename, content) {\n        this.__kernel__.put_file(filename, content);\n    }\n    /**\n     * Put an importable module on the local (emulated) filesystem\n     * and load dependencies.\n     */\n    putModule(filename, content) {\n        return this.__kernel__.put_module(filename, content);\n    }\n    /**\n     * List modules launched via putModule.\n     */\n    userModules() {\n        return this.__kernel__.user_modules();\n    }\n    /**\n     * Download a file from the VFS.\n     */\n    getFile(path) {\n        return this.__kernel__.get_file(path);\n    }\n    /**\n     * Download a user module file.\n     */\n    getUserModuleFile(filename) {\n        return this.__kernel__.get_user_module_file(filename);\n    }\n    /**\n     * Is the source ready to be evaluated or want we more?\n     * Usefull to set ps1/ps2 for teminal prompt.\n     */\n    more(source) {\n        return this.__kernel__.more(source);\n    }\n    /**\n     * Mimic the CPython's REPL banner.\n     */\n    banner() {\n        /* We don't return this.__kernel__.banner();\n         * since the banner should be available ASAP.\n         * In tests, we check this.banner() ===  this.__kernel__.banner().\n         */\n        return `Python 3.8.2 (default, Dec 25 2020 21:20:57) on WebAssembly VM\\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.`;\n    }\n    /**\n     * Complete a code at the end (usefull for tab completion).\n     *\n     * Returns an array of two elements: the list of completions\n     * and the start index.\n     */\n    complete(code) {\n        return this.__kernel__.complete(code);\n    }\n    /**\n     * Change current directory (Python's virtual FS).\n     */\n    chdir(path) {\n        window.pyodide._module.FS.chdir(path);\n    }\n    /**\n     * Create directory (Python's virtual FS).\n     */\n    mkdir(path) {\n        window.pyodide._module.FS.mkdir(path);\n    }\n}\n"],"names":["KernelPython3","constructor","rootPath","super","this","_pyodideUrl","__kernel__","pythonVersion","basthonModulesRoot","absolute","basthonRoot","language","languageName","moduleExts","async","pyodide","window","runPython","consoleErrorBck","console","error","loadPackage","runPythonAsync","globals","__basthon__","url","xhr","method","e","languagePluginUrl","substr","lastIndexOf","loadScript","log","languagePluginLoader","Error","then","_onload","bind","code","outCallback","errCallback","data","text","eval","restart","putFile","filename","content","put_file","putModule","put_module","userModules","user_modules","getFile","path","get_file","getUserModuleFile","get_user_module_file","more","source","banner","complete","chdir","_module","FS","mkdir"],"sourceRoot":""}